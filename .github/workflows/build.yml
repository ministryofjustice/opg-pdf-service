name: Test & Build

on:
  schedule:
    - cron: "00 10 * * 1"
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test PDF Service
    uses: ./.github/workflows/test_job.yml

  publish_unit_tests:
    name: Publish Unit Tests
    needs: ['test', 'push']
    if: github.ref != 'refs/heads/main'
    uses: ./.github/workflows/publish_unit_tests_job.yml


  build:
    name: Build Image
    uses: ministryofjustice/opg-github-workflows/.github/workflows/build-multi-architecture-image.yml@6bc0246b5cca2f4c85d06986c82a9a42643f6851 # v3.13.0
    with:
      image_name: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/pdf-service
      build_options: --target production

  push:
    name: Push Image
    runs-on: ubuntu-latest
    needs: ['test', 'build']
    outputs:
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=${{ github.head_ref }} >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@e528bc2b9628971ce0e6f823f3052d1dcd9d512c # 1.73.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: 1.0.0
          DEFAULT_BUMP: minor
          PRERELEASE: true
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true

      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: /tmp/images
          name: multi-arch-image
      - name: Load Image
        run: |
          docker load -i /tmp/images/multi-arch-image.tar

      - name: Install Inspec for Image Tests
        run: |
          curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec -v 5
          inspec --chef-license=accept

      - name: Test Image with Inspec
        env:
          CHEF_LICENSE: accept
        run: |
          make test-image

      - name: Upload Inspec Junit
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: inspec
          path: |
            test-results/junit

      - name: Load Test Image with Inspec
        env:
          CHEF_LICENSE: accept
        run: |
          make load-test-image

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@f24d7193d98baebaeacc7e2227925dd47cc267f5 # v4.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: 311462405659

      - name: Run Trivy
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
          DOCKER_USERNAME: ${{ steps.login-ecr.outputs.docker_username_311462405659_dkr_ecr_eu_west_1_amazonaws_com }}
          DOCKER_PASSWORD: ${{ steps.login-ecr.outputs.docker_password_311462405659_dkr_ecr_eu_west_1_amazonaws_com }}
        run: make scan

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        if: always()
        with:
          sarif_file: 'test-results/trivy.sarif'

      - name: Tag & Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PDF_SERVICE_ECR_REPOSITORY: pdf-service
        if: github.actor != 'renovate[bot]'
        run: |
          docker tag $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:latest $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          if [ $BRANCH_NAME == "main" ]; then
            docker tag $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:latest $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:main-${{ steps.bump_version.outputs.tag }}
            docker tag $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:latest $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:main-${{ steps.bump_version.outputs.tag }}-$(date +"%Y%m%d%H%M%S")
            # We want all of the tags pushed
            docker push  --all-tags $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$PDF_SERVICE_ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
          fi

  push-tags:
    runs-on: ubuntu-latest
    needs: push
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@f24d7193d98baebaeacc7e2227925dd47cc267f5 # v4.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-pdf-service-latest-green-build" --type "String" --value "${{ needs.push.outputs.tag}}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-pdf-service"
