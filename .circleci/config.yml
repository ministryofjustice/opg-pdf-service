version: 2.1

workflows:
  pr-build-and-test:
    jobs:
      - test_pdf_service:
          name: test_pdf_service
      - docker_build_pdf_service:
          name: build_pdf_service
          requires: [test_pdf_service]

orbs:
  pdf_service:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      ecr_login:
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::311462405659:role/sirius-ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                eval $(aws ecr get-login --no-include-email --region=eu-west-1)
    executors:
      python:
       docker: [image: circleci/python]
       resource_class: small


jobs:
  test_pdf_service:
    docker:
      - image: 'buildkite/puppeteer:5.2.1'
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yarn install
      - run:
          name: Run tests with Jest
          command: mkdir -p ./test-results/junit && ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results/junit
      - run:
          name: Run coverage with Jest
          command: |
            mkdir -p /root/project/build/service-pdf
            ./node_modules/.bin/jest --ci --runInBand --collectCoverage=true
            cp -a ./coverage /root/project/build/service-pdf
      - store_test_results:
          path: build/service-pdf/
      - store_artifacts:
          path: build/service-pdf/

  docker_build_pdf_service:
    #
    # Build Docker container for PDF Generator
    #   and runs the Unit Tests.
    #
    executor: pdf_service/python
    parameters:
      container_repo_url:
        type: string
        default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/pdf_service
    steps:
      - checkout
      - pdf_service/install_aws_cli
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: false
      - run:
          name: Build
          command: |
            docker build --file Dockerfile --tag pdf_service:latest .
      - pdf_service/ecr_login
      - run:
          name: Push container
          command: |
            export SHORT_HASH=${CIRCLE_SHA1:0:7} >> $BASH_ENV
            docker tag pdf_service:latest << parameters.container_repo_url >>:latest
            docker tag pdf_service:latest << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # We want all of the tags pushed
              docker push << parameters.container_repo_url >>
            else
              docker push << parameters.container_repo_url >>:$CIRCLE_BRANCH-$SHORT_HASH
            fi
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Update Parameter Store Green Build value
                command: |
                  export SHORT_HASH=${CIRCLE_SHA1:0:7}
                  temp_role=$(aws sts assume-role --role-arn arn:aws:iam::997462338508:role/sirius-ci --role-session-name ci)
                  export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                  export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                  export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                  aws ssm put-parameter --name "opg-pdf-service-latest-green-build" --type "String" --value "$CIRCLE_BRANCH-$SHORT_HASH" --overwrite --region=eu-west-1
            - run:
                name: Trigger Sirius Platform Deployment
                command: curl -u ${JENKINS_API_USER}:${JENKINS_API_TOKEN} "https://${JENKINS_URL}/job/Sirius/job/Deploy_to_Development/build?token=${JENKINS_API_TOKEN_NAME}&cause=Triggered+by+opg-pdf-service"
